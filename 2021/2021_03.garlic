compile "aoc.garlic"
lines = util.read_file("2021_03.txt")

diagnostics = 
{
    get_avg_bit = (lines, index)
    {
        total = lines.count
        bit = 0
        
        for (l = 0) (l < total) (l++) 
        {
            line = lines[l]
            value = std.num(line[index])
            bit += value
        }

        return = (bit / total)
    }
}

// Day 03 - Part 01
bit_count = lines[0]
bit_count = bit_count.length
gamma = { count = bit_count }
epsilon = { count = bit_count }

for (i = 0) (i < bit_count) (i++) 
{
    avg = diagnostics.get_avg_bit(lines, i)
    if(avg > 0.5) 
    {
        gamma[i] = 1
        epsilon[i] = 0
    }
    else
    {
        gamma[i] = 0
        epsilon[i] = 1
    }
}

gamma = util.binary_array_to_num(gamma)
epsilon = util.binary_array_to_num(epsilon)

std.log("Day 03 - Part 01: GAMMA:   " + gamma)
std.log("Day 03 - Part 01: EPSILON: " + epsilon)
std.log("Day 03 - Part 01: RESULT:  " + (gamma * epsilon))

// Day 03 - Part 02

oxygen_items = lines
carbon_items = lines

for (i = 0) (i < bit_count) (i++) 
{
    // oxygen - most common
    if(oxygen_items.count > 1)
    {
        avg = diagnostics.get_avg_bit(oxygen_items, i)
        if(avg >= 0.5) { avg = 1 }
        else { avg = 0 }

        temp = { count = 0 }
        for (j = 0) (j < oxygen_items.count) (j++)
        {
            line = oxygen_items[j]
            bit = line[i]
            if(bit == avg)
            {
                temp[temp.count] = line
                temp.count ++
            }
        } 
        oxygen_items = temp
    }

    // co2 - least common
    if(carbon_items.count > 1)
    {
        avg = diagnostics.get_avg_bit(carbon_items, i)
        if(avg < 0.5) { avg = 1 }
        else { avg = 0 }

        temp = { count = 0 }
        for (j = 0) (j < carbon_items.count) (j++)
        {
            line = carbon_items[j]
            bit = line[i]
            if(bit == avg)
            {
                temp[temp.count] = line
                temp.count ++
            }
        } 
        carbon_items = temp
    }
}

oxygen_generator = oxygen_items[0]
oxygen_generator = util.binary_str_to_num(oxygen_generator)

carbon_scrubber = carbon_items[0]
carbon_scrubber = util.binary_str_to_num(carbon_scrubber)

std.log("Day 03 - Part 02: OXYGEN: " + oxygen_generator)
std.log("Day 03 - Part 02: CARBON: " + carbon_scrubber)
std.log("Day 03 - Part 02: RESULT: " + (oxygen_generator * carbon_scrubber))
